import {app, BrowserWindow, dialog, ipcMain, Menu, shell} from 'electron';
import * as path from 'path';
import {opendir, readFile, writeFile} from 'fs/promises';
import {Dir} from 'fs';
import {EditorFile} from './shared/types';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	// eslint-disable-line global-require
	app.quit();
}

const getFiles = async (root: Dir): Promise<EditorFile> => {
	const children: Array<EditorFile> = [];

	for await (const dirent of root) {
		if (dirent.isFile()) {
			children.push({
				directory: false,
				name: dirent.name,
				path: path.join(root.path, dirent.name)
			});
		} else {
			children.push(await getFiles(await opendir(path.join(root.path, dirent.name))));
		}
	}

	return {
		directory: true,
		name: path.basename(root.path),
		path: root.path,
		children
	};
};

const createWindow = (): void => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height: 720,
		width: 1280,
		webPreferences: {
			preload: path.join(__dirname, 'preload.js')
		}
	});

	mainWindow.setMenu(Menu.buildFromTemplate([
		{
			label: 'File',
			submenu: [
				{
					label: 'New',
					submenu: [
						{
							label: 'Project'
						},
						{
							label: 'Script'
						}
					]
				},
				{
					label: 'Open',
					submenu: [
						{
							label: 'Project',
							click: () => mainWindow.webContents.send('menu:openproject')
						},
						{
							label: 'TTARCH2 Archive'
						}
					]
				},
				{
					label: 'Save'
				},
				{
					label: 'Save As'
				},
				{
					label: 'Exit',
					click: () => mainWindow.close()
				}
			]
		},
		{
			role: 'editMenu'
		},
		{
			label: 'Project',
			submenu: [
				{
					label: 'Build'
				},
				{
					label: 'Build and Run'
				}
			]
		},
		{
			label: 'Help',
			submenu: [
				{
					label: 'Docs',
					click: () => shell.openExternal('https://github.com/Telltale-Modding-Group/Telltale-Script-Editor/wiki')
				},
				{
					label: 'About'
				},
				{
					label: 'Contribute',
					click: () => shell.openExternal('https://github.com/Telltale-Modding-Group/Telltale-Script-Editor')
				},
				{
					label: 'Debug',
					submenu: [
						{
							label: 'Verbose Output'
						},
						{
							label: 'Show Project Info'
						}
					]
				}
			]
		}
	]));

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	ipcMain.handle('openproject', async () => {
		const selection = await dialog.showOpenDialog({
			title: 'Open project',
			filters: [
				{
					name: 'Telltale Script Editor Project',
					extensions: ['tseproj']
				}
			]
		});

		if (selection.canceled) return;

		const root = await opendir(path.dirname(selection.filePaths[0]));

		return getFiles(root);
	});

	ipcMain.handle('getfilecontents', async (ev, path: string) => {
		return (await readFile(path, { encoding: 'utf8' })).trim();
	});

	ipcMain.handle('savefile', (ev, path: string, newContents: string) => {
		return writeFile(path, newContents)
	});

	// Open the DevTools.
	mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
