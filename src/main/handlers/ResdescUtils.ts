import {Project} from '../../shared/types';

export type ResourceDescription = {
	setName: string,
	priority: number,
	enableMode: string,
	setVersion: string,
	ttarchName: string,
};

export const generateLogicalName = (archive: string) => archive
	.replace(/\..*?$/g, '')
	.replaceAll('WDC_pc_', '')
	.replaceAll('_data', '');

export const generateResourceDescriptionName = (project: Project, resdesc: ResourceDescription) => `_resdesc_50_${generateLogicalName(resdesc.ttarchName)}.lua`;

export const formatProjectName = (project: Project) => project.mod.name.replace(/[^/da-zA-Z]+/g, '');
export const generateTtarchName = (project: Project, archive: string) => `${archive}_${formatProjectName(project)}.ttarch2`;

export const createResourceDescription = (project: Project, archive: string): ResourceDescription => {
	const formattedProjectName = formatProjectName(project);

	const logicalName = generateLogicalName(archive);

	const setName = logicalName + formattedProjectName;
	let enableMode = "constant";
	let setVersion = "dummydata";

	if(logicalName !== "DebugMenu") {
		enableMode = "bootable";
		setVersion = "trunk";
	}

	const ttarchName = generateTtarchName(project, archive);

	return {
		setName,
		priority: project.mod.priority,
		enableMode,
		setVersion,
		ttarchName
	};
};

export const generateResourceDescriptionContents = (project: Project, { setName, enableMode, setVersion, ttarchName }: ResourceDescription) => `
--This file was automatically generated by the Telltale Script Editor, available at https://github.com/Telltale-Modding-Group/Telltale-Script-Editor"
--File associated with '${project.mod.name}' by ${project.mod.author}, version ${project.mod.version}
local set = {}
set.name = "${setName}"
set.setName = "${setName}"
set.descriptionFilenameOverride = ""
set.logicalName = "<>" --Empty for now, band-aid fix for later.
set.logicalDestination = "<>"
set.priority = ${project.mod.priority}
set.localDir = _currentDirectory
set.enableMode = "${enableMode}"
set.version = "${setVersion}"
set.descriptionPriority = 0
set.gameDataName = "${setName} Game Data"
set.gameDataPriority = ${project.mod.priority}
set.gameDataEnableMode = "constant"
set.localDirIncludeBase = true
set.localDirRecurse = false
set.localDirIncludeOnly = nil
set.localDirExclude =
{
    "Packaging/",
    "_dev/"
}
set.gameDataArchives =
{
    _currentDirectory .. "${ttarchName}"
}
RegisterSetDescription(set)`.trim();